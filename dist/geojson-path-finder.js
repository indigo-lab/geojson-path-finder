var PathFinder=function(e){var r={};function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)t.d(n,o,function(r){return e[r]}.bind(null,o));return n},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=3)}([function(e,r,t){"use strict";t.r(r),t.d(r,"earthRadius",function(){return n}),t.d(r,"factors",function(){return o}),t.d(r,"unitsFactors",function(){return i}),t.d(r,"areaFactors",function(){return a}),t.d(r,"feature",function(){return s}),t.d(r,"geometry",function(){return u}),t.d(r,"point",function(){return c}),t.d(r,"points",function(){return d}),t.d(r,"polygon",function(){return f}),t.d(r,"polygons",function(){return l}),t.d(r,"lineString",function(){return h}),t.d(r,"lineStrings",function(){return g}),t.d(r,"featureCollection",function(){return m}),t.d(r,"multiLineString",function(){return p}),t.d(r,"multiPoint",function(){return y}),t.d(r,"multiPolygon",function(){return w}),t.d(r,"geometryCollection",function(){return v}),t.d(r,"round",function(){return b}),t.d(r,"radiansToLength",function(){return E}),t.d(r,"lengthToRadians",function(){return P}),t.d(r,"lengthToDegrees",function(){return k}),t.d(r,"bearingToAzimuth",function(){return M}),t.d(r,"radiansToDegrees",function(){return x}),t.d(r,"degreesToRadians",function(){return R}),t.d(r,"convertLength",function(){return A}),t.d(r,"convertArea",function(){return F}),t.d(r,"isNumber",function(){return _}),t.d(r,"isObject",function(){return O}),t.d(r,"validateBBox",function(){return j}),t.d(r,"validateId",function(){return T}),t.d(r,"radians2degrees",function(){return S}),t.d(r,"degrees2radians",function(){return C}),t.d(r,"distanceToDegrees",function(){return L}),t.d(r,"distanceToRadians",function(){return D}),t.d(r,"radiansToDistance",function(){return q}),t.d(r,"bearingToAngle",function(){return I}),t.d(r,"convertDistance",function(){return N});var n=6371008.8,o={meters:n,metres:n,millimeters:1e3*n,millimetres:1e3*n,centimeters:100*n,centimetres:100*n,kilometers:n/1e3,kilometres:n/1e3,miles:n/1609.344,nauticalmiles:n/1852,inches:39.37*n,yards:n/1.0936,feet:3.28084*n,radians:1,degrees:n/111325},i={meters:1,metres:1,millimeters:1e3,millimetres:1e3,centimeters:100,centimetres:100,kilometers:.001,kilometres:.001,miles:1/1609.344,nauticalmiles:1/1852,inches:39.37,yards:1/1.0936,feet:3.28084,radians:1/n,degrees:1/111325},a={meters:1,metres:1,millimeters:1e6,millimetres:1e6,centimeters:1e4,centimetres:1e4,kilometers:1e-6,kilometres:1e-6,acres:247105e-9,miles:386e-9,yards:1.195990046,feet:10.763910417,inches:1550.003100006};function s(e,r,t){if(!O(t=t||{}))throw new Error("options is invalid");var n=t.bbox,o=t.id;if(void 0===e)throw new Error("geometry is required");if(r&&r.constructor!==Object)throw new Error("properties must be an Object");n&&j(n),o&&T(o);var i={type:"Feature"};return o&&(i.id=o),n&&(i.bbox=n),i.properties=r||{},i.geometry=e,i}function u(e,r,t){if(!O(t=t||{}))throw new Error("options is invalid");var n,o=t.bbox;if(!e)throw new Error("type is required");if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");switch(o&&j(o),e){case"Point":n=c(r).geometry;break;case"LineString":n=h(r).geometry;break;case"Polygon":n=f(r).geometry;break;case"MultiPoint":n=y(r).geometry;break;case"MultiLineString":n=p(r).geometry;break;case"MultiPolygon":n=w(r).geometry;break;default:throw new Error(e+" is invalid")}return o&&(n.bbox=o),n}function c(e,r,t){if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");if(e.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!_(e[0])||!_(e[1]))throw new Error("coordinates must contain numbers");return s({type:"Point",coordinates:e},r,t)}function d(e,r,t){if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");return m(e.map(function(e){return c(e,r)}),t)}function f(e,r,t){if(!e)throw new Error("coordinates is required");for(var n=0;n<e.length;n++){var o=e[n];if(o.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var i=0;i<o[o.length-1].length;i++){if(0===n&&0===i&&!_(o[0][0])||!_(o[0][1]))throw new Error("coordinates must contain numbers");if(o[o.length-1][i]!==o[0][i])throw new Error("First and last Position are not equivalent.")}}return s({type:"Polygon",coordinates:e},r,t)}function l(e,r,t){if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");return m(e.map(function(e){return f(e,r)}),t)}function h(e,r,t){if(!e)throw new Error("coordinates is required");if(e.length<2)throw new Error("coordinates must be an array of two or more positions");if(!_(e[0][1])||!_(e[0][1]))throw new Error("coordinates must contain numbers");return s({type:"LineString",coordinates:e},r,t)}function g(e,r,t){if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");return m(e.map(function(e){return h(e,r)}),t)}function m(e,r){if(!O(r=r||{}))throw new Error("options is invalid");var t=r.bbox,n=r.id;if(!e)throw new Error("No features passed");if(!Array.isArray(e))throw new Error("features must be an Array");t&&j(t),n&&T(n);var o={type:"FeatureCollection"};return n&&(o.id=n),t&&(o.bbox=t),o.features=e,o}function p(e,r,t){if(!e)throw new Error("coordinates is required");return s({type:"MultiLineString",coordinates:e},r,t)}function y(e,r,t){if(!e)throw new Error("coordinates is required");return s({type:"MultiPoint",coordinates:e},r,t)}function w(e,r,t){if(!e)throw new Error("coordinates is required");return s({type:"MultiPolygon",coordinates:e},r,t)}function v(e,r,t){if(!e)throw new Error("geometries is required");if(!Array.isArray(e))throw new Error("geometries must be an Array");return s({type:"GeometryCollection",geometries:e},r,t)}function b(e,r){if(null==e||isNaN(e))throw new Error("num is required");if(r&&!(r>=0))throw new Error("precision must be a positive number");var t=Math.pow(10,r||0);return Math.round(e*t)/t}function E(e,r){if(null==e)throw new Error("radians is required");if(r&&"string"!=typeof r)throw new Error("units must be a string");var t=o[r||"kilometers"];if(!t)throw new Error(r+" units is invalid");return e*t}function P(e,r){if(null==e)throw new Error("distance is required");if(r&&"string"!=typeof r)throw new Error("units must be a string");var t=o[r||"kilometers"];if(!t)throw new Error(r+" units is invalid");return e/t}function k(e,r){return x(P(e,r))}function M(e){if(null==e)throw new Error("bearing is required");var r=e%360;return r<0&&(r+=360),r}function x(e){if(null==e)throw new Error("radians is required");return 180*(e%(2*Math.PI))/Math.PI}function R(e){if(null==e)throw new Error("degrees is required");return e%360*Math.PI/180}function A(e,r,t){if(null==e)throw new Error("length is required");if(!(e>=0))throw new Error("length must be a positive number");return E(P(e,r),t||"kilometers")}function F(e,r,t){if(null==e)throw new Error("area is required");if(!(e>=0))throw new Error("area must be a positive number");var n=a[r||"meters"];if(!n)throw new Error("invalid original units");var o=a[t||"kilometers"];if(!o)throw new Error("invalid final units");return e/n*o}function _(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)}function O(e){return!!e&&e.constructor===Object}function j(e){if(!e)throw new Error("bbox is required");if(!Array.isArray(e))throw new Error("bbox must be an Array");if(4!==e.length&&6!==e.length)throw new Error("bbox must be an Array of 4 or 6 numbers");e.forEach(function(e){if(!_(e))throw new Error("bbox must only contain numbers")})}function T(e){if(!e)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof e))throw new Error("id must be a number or a string")}function S(){throw new Error("method has been renamed to `radiansToDegrees`")}function C(){throw new Error("method has been renamed to `degreesToRadians`")}function L(){throw new Error("method has been renamed to `lengthToDegrees`")}function D(){throw new Error("method has been renamed to `lengthToRadians`")}function q(){throw new Error("method has been renamed to `radiansToLength`")}function I(){throw new Error("method has been renamed to `bearingToAzimuth`")}function N(){throw new Error("method has been renamed to `convertLength`")}},function(e,r){e.exports=function(e,r){return[Math.round(e[0]/r)*r,Math.round(e[1]/r)*r]}},function(e,r,t){"use strict";function n(e,r,t,n,o,i,a){a=a||{};var s=r[e];return Object.keys(s).reduce(function(s,u){var c=function(e,r,t,n,o,i,a,s){var u=t[e][r],c=t[r][e],d=[],f=[],l=s.edgeDataSeed;for(s.edgeDataReduceFn&&(l=s.edgeDataReduceFn(l,i[r][e]));!n[r];){var h=t[r];if(!h)break;var g=Object.keys(h).filter(function(r){return r!==e})[0];if(u+=h[g],a){if(c+=t[g][r],f.indexOf(r)>=0){n[r]=t[r];break}f.push(r)}s.edgeDataReduceFn&&(l=s.edgeDataReduceFn(l,i[r][g])),d.push(o[r]),e=r,r=g}return{vertex:r,weight:u,reverseWeight:c,coordinates:d,reducedEdge:l}}(e,u,r,t,n,o,i,a),d=c.weight,f=c.reverseWeight;if(c.vertex!==e&&((!s.edges[c.vertex]||s.edges[c.vertex]>d)&&(s.edges[c.vertex]=d,s.coordinates[c.vertex]=[n[e]].concat(c.coordinates),s.reducedEdges[c.vertex]=c.reducedEdge),i&&!isNaN(f)&&(!s.incomingEdges[c.vertex]||s.incomingEdges[c.vertex]>f))){s.incomingEdges[c.vertex]=f;var l=[n[e]].concat(c.coordinates);l.reverse(),s.incomingCoordinates[c.vertex]=l}return s},{edges:{},incomingEdges:{},coordinates:{},incomingCoordinates:{},reducedEdges:{}})}e.exports={compactNode:n,compactGraph:function(e,r,t,o){var i=(o=o||{}).progress,a=Object.keys(e).reduce(function(r,t,n,o){var a,s=e[t],u=Object.keys(s),c=u.length;if(1===c){var d=e[u[0]];a=!d[t]}else a=2===c&&u.filter(function(r){return e[r][t]}).length===c;return a||(r[t]=s),n%1e3==0&&i&&i("compact:ends",n,o.length),r},{});return Object.keys(a).reduce(function(s,u,c,d){var f=n(u,e,a,r,t,!1,o);return s.graph[u]=f.edges,s.coordinates[u]=f.coordinates,o.edgeDataReduceFn&&(s.reducedEdges[u]=f.reducedEdges),c%1e3==0&&i&&i("compact:nodes",c,d.length),s},{graph:{},coordinates:{},reducedEdges:{}})}}},function(e,r,t){"use strict";var n=t(4),o=t(6),i=t(2),a=t(1);function s(e,r){if(r=r||{},e.compactedVertices||(e=o(e,r)),this._graph=e,this._keyFn=r.keyFn||function(e){return e.join(",")},this._precision=r.precision||1e-5,this._options=r,0===Object.keys(this._graph.compactedVertices).filter(function(e){return"edgeData"!==e}).length)throw new Error("Compacted graph contains no forks (topology has no intersections).")}e.exports=s,s.prototype={findPath:function(e,r){var t=this._keyFn(a(e.geometry.coordinates,this._precision)),o=this._keyFn(a(r.geometry.coordinates,this._precision));if(!this._graph.vertices[t]||!this._graph.vertices[o])return null;this._createPhantom(t),this._createPhantom(o);var i=n(this._graph.compactedVertices,t,o);if(i){var s=i[0];return{path:(i=i[1]).reduce(function(e,r,t,n){return t>0&&(e=e.concat(this._graph.compactedCoordinates[n[t-1]][r])),e}.bind(this),[]).concat([this._graph.sourceVertices[o]]),weight:s,edgeDatas:this._graph.compactedEdges?i.reduce(function(e,r,t,n){return t>0&&e.push({reducedEdge:this._graph.compactedEdges[n[t-1]][r]}),e}.bind(this),[]):void 0}}return null},serialize:function(){return this._graph},_createPhantom:function(e){if(this._graph.compactedVertices[e])return null;var r=i.compactNode(e,this._graph.vertices,this._graph.compactedVertices,this._graph.sourceVertices,this._graph.edgeData,!0,this._options);return this._graph.compactedVertices[e]=r.edges,this._graph.compactedCoordinates[e]=r.coordinates,this._graph.compactedEdges&&(this._graph.compactedEdges[e]=r.reducedEdges),Object.keys(r.incomingEdges).forEach(function(t){this._graph.compactedVertices[t][e]=r.incomingEdges[t],this._graph.compactedCoordinates[t][e]=r.incomingCoordinates[t],this._graph.compactedEdges&&(this._graph.compactedEdges[t][e]=r.reducedEdges[t])}.bind(this)),e},_removePhantom:function(e){e&&(Object.keys(this._graph.compactedVertices[e]).forEach(function(r){delete this._graph.compactedVertices[r][e]}.bind(this)),Object.keys(this._graph.compactedCoordinates[e]).forEach(function(r){delete this._graph.compactedCoordinates[r][e]}.bind(this)),this._graph.compactedEdges&&Object.keys(this._graph.compactedEdges[e]).forEach(function(r){delete this._graph.compactedEdges[r][e]}.bind(this)),delete this._graph.compactedVertices[e],delete this._graph.compactedCoordinates[e],this._graph.compactedEdges&&delete this._graph.compactedEdges[e])}}},function(e,r,t){var n=t(5);e.exports=function(e,r,t){var o={};o[r]=0;for(var i=new n([[0,[r],r]],function(e,r){return e[0]-r[0]});i.length;){var a=i.pop(),s=a[0],u=a[2];if(u===t)return a.slice(0,2);var c=e[u];Object.keys(c).forEach(function(e){var r=s+c[e];if(!(e in o)||r<o[e]){o[e]=r;var t=[r,a[1].concat([e]),e];i.push(t)}})}return null}},function(e,r,t){e.exports=function(){"use strict";function e(e,r){return e<r?-1:e>r?1:0}var r=function(r,t){if(void 0===r&&(r=[]),void 0===t&&(t=e),this.data=r,this.length=this.data.length,this.compare=t,this.length>0)for(var n=(this.length>>1)-1;n>=0;n--)this._down(n)};return r.prototype.push=function(e){this.data.push(e),this.length++,this._up(this.length-1)},r.prototype.pop=function(){if(0!==this.length){var e=this.data[0];return this.length--,this.length>0&&(this.data[0]=this.data[this.length],this._down(0)),this.data.pop(),e}},r.prototype.peek=function(){return this.data[0]},r.prototype._up=function(e){for(var r=this.data,t=this.compare,n=r[e];e>0;){var o=e-1>>1,i=r[o];if(t(n,i)>=0)break;r[e]=i,e=o}r[e]=n},r.prototype._down=function(e){for(var r=this.data,t=this.compare,n=this.length>>1,o=r[e];e<n;){var i=1+(e<<1),a=i+1,s=r[i];if(a<this.length&&t(r[a],s)<0&&(i=a,s=r[a]),t(s,o)>=0)break;r[e]=s,e=i}r[e]=o},r}()},function(e,r,t){"use strict";var n=t(7),o=t(2),i=t(10).default,a=(t(1),t(14));e.exports=function(e,r){var t,s=(r=r||{}).weightFn||function(e,r){return i(a(e),a(r))};"FeatureCollection"===e.type?t=n(e,r):e.edges&&(t=e);e=t.edges.reduce(function(e,n,o,i){var a=n[0],u=n[1],c=n[2],d=s(t.vertices[a],t.vertices[u],c),f=function(t){e.vertices[t]||(e.vertices[t]={},r.edgeDataReduceFn&&(e.edgeData[t]={}))},l=function(t,n,o){e.vertices[t][n]=o,r.edgeDataReduceFn&&(e.edgeData[t][n]=r.edgeDataReduceFn(r.edgeDataSeed,c))};return d&&(f(a),f(u),d instanceof Object?(d.forward&&l(a,u,d.forward),d.backward&&l(u,a,d.backward)):(l(a,u,d),l(u,a,d))),o%1e3==0&&r.progress&&r.progress("edgeweights",o,i.length),e},{edgeData:{},vertices:{}});var u=o.compactGraph(e.vertices,t.vertices,e.edgeData,r);return{vertices:e.vertices,edgeData:e.edgeData,sourceVertices:t.vertices,compactedVertices:u.graph,compactedCoordinates:u.coordinates,compactedEdges:r.edgeDataReduceFn?u.reducedEdges:null}}},function(e,r,t){"use strict";var n=t(8),o=t(1);function i(e){return"LineString"===e.geometry.type}e.exports=function(e,r){var t=(r=r||{}).keyFn||function(e){return e.join(",")},a=r.precision||1e-5,s=function(e,r){var t=[];"FeatureCollection"===e.type&&(t=t.concat(e.features.filter(r)));return{type:"FeatureCollection",features:t}}(e,i),u=n(s).features.reduce(function(e,n,i,s){var u=o(n.geometry.coordinates,a);return e[t(u)]=n.geometry.coordinates,i%1e3==0&&r.progress&&r.progress("topo:vertices",i,s.length),e},{}),c=function e(r,t,n){return"FeatureCollection"===r.type?r.features.reduce(function(r,n){return e(n,t,r)},n):t(n,r)}(s,function(e,n,i,s){return n.geometry.coordinates.forEach(function(r,i,s){if(i>0){var u=t(o(s[i-1],a)),c=t(o(r,a));e.push([u,c,n.properties])}}),i%1e3==0&&r.progress&&r.progress("topo:edges",i,s.length),e},[]);return{vertices:u,edges:c}}},function(e,r,t){"use strict";var n=t(9),o=t(0);function i(e){var r=[];return"FeatureCollection"===e.type?n.featureEach(e,function(e){n.coordEach(e,function(t){r.push(o.point(t,e.properties))})}):n.coordEach(e,function(t){r.push(o.point(t,e.properties))}),o.featureCollection(r)}e.exports=i,e.exports.default=i},function(e,r,t){"use strict";t.r(r),t.d(r,"coordEach",function(){return o}),t.d(r,"coordReduce",function(){return i}),t.d(r,"propEach",function(){return a}),t.d(r,"propReduce",function(){return s}),t.d(r,"featureEach",function(){return u}),t.d(r,"featureReduce",function(){return c}),t.d(r,"coordAll",function(){return d}),t.d(r,"geomEach",function(){return f}),t.d(r,"geomReduce",function(){return l}),t.d(r,"flattenEach",function(){return h}),t.d(r,"flattenReduce",function(){return g}),t.d(r,"segmentEach",function(){return m}),t.d(r,"segmentReduce",function(){return p}),t.d(r,"lineEach",function(){return y}),t.d(r,"lineReduce",function(){return w}),t.d(r,"findSegment",function(){return v}),t.d(r,"findPoint",function(){return b});var n=t(0);function o(e,r,t){if(null!==e)for(var n,i,a,s,u,c,d,f,l=0,h=0,g=e.type,m="FeatureCollection"===g,p="Feature"===g,y=m?e.features.length:1,w=0;w<y;w++){u=(f=!!(d=m?e.features[w].geometry:p?e.geometry:e)&&"GeometryCollection"===d.type)?d.geometries.length:1;for(var v=0;v<u;v++){var b=0,E=0;if(null!==(s=f?d.geometries[v]:d)){c=s.coordinates;var P=s.type;switch(l=!t||"Polygon"!==P&&"MultiPolygon"!==P?0:1,P){case null:break;case"Point":if(!1===r(c,h,w,b,E))return!1;h++,b++;break;case"LineString":case"MultiPoint":for(n=0;n<c.length;n++){if(!1===r(c[n],h,w,b,E))return!1;h++,"MultiPoint"===P&&b++}"LineString"===P&&b++;break;case"Polygon":case"MultiLineString":for(n=0;n<c.length;n++){for(i=0;i<c[n].length-l;i++){if(!1===r(c[n][i],h,w,b,E))return!1;h++}"MultiLineString"===P&&b++,"Polygon"===P&&E++}"Polygon"===P&&b++;break;case"MultiPolygon":for(n=0;n<c.length;n++){for("MultiPolygon"===P&&(E=0),i=0;i<c[n].length;i++){for(a=0;a<c[n][i].length-l;a++){if(!1===r(c[n][i][a],h,w,b,E))return!1;h++}E++}b++}break;case"GeometryCollection":for(n=0;n<s.geometries.length;n++)if(!1===o(s.geometries[n],r,t))return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function i(e,r,t,n){var i=t;return o(e,function(e,n,o,a,s){i=0===n&&void 0===t?e:r(i,e,n,o,a,s)},n),i}function a(e,r){var t;switch(e.type){case"FeatureCollection":for(t=0;t<e.features.length&&!1!==r(e.features[t].properties,t);t++);break;case"Feature":r(e.properties,0)}}function s(e,r,t){var n=t;return a(e,function(e,o){n=0===o&&void 0===t?e:r(n,e,o)}),n}function u(e,r){if("Feature"===e.type)r(e,0);else if("FeatureCollection"===e.type)for(var t=0;t<e.features.length&&!1!==r(e.features[t],t);t++);}function c(e,r,t){var n=t;return u(e,function(e,o){n=0===o&&void 0===t?e:r(n,e,o)}),n}function d(e){var r=[];return o(e,function(e){r.push(e)}),r}function f(e,r){var t,n,o,i,a,s,u,c,d,f,l=0,h="FeatureCollection"===e.type,g="Feature"===e.type,m=h?e.features.length:1;for(t=0;t<m;t++){for(s=h?e.features[t].geometry:g?e.geometry:e,c=h?e.features[t].properties:g?e.properties:{},d=h?e.features[t].bbox:g?e.bbox:void 0,f=h?e.features[t].id:g?e.id:void 0,a=(u=!!s&&"GeometryCollection"===s.type)?s.geometries.length:1,o=0;o<a;o++)if(null!==(i=u?s.geometries[o]:s))switch(i.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":if(!1===r(i,l,c,d,f))return!1;break;case"GeometryCollection":for(n=0;n<i.geometries.length;n++)if(!1===r(i.geometries[n],l,c,d,f))return!1;break;default:throw new Error("Unknown Geometry Type")}else if(!1===r(null,l,c,d,f))return!1;l++}}function l(e,r,t){var n=t;return f(e,function(e,o,i,a,s){n=0===o&&void 0===t?e:r(n,e,o,i,a,s)}),n}function h(e,r){f(e,function(e,t,o,i,a){var s,u=null===e?null:e.type;switch(u){case null:case"Point":case"LineString":case"Polygon":return!1!==r(Object(n.feature)(e,o,{bbox:i,id:a}),t,0)&&void 0}switch(u){case"MultiPoint":s="Point";break;case"MultiLineString":s="LineString";break;case"MultiPolygon":s="Polygon"}for(var c=0;c<e.coordinates.length;c++){var d={type:s,coordinates:e.coordinates[c]};if(!1===r(Object(n.feature)(d,o),t,c))return!1}})}function g(e,r,t){var n=t;return h(e,function(e,o,i){n=0===o&&0===i&&void 0===t?e:r(n,e,o,i)}),n}function m(e,r){h(e,function(e,t,i){var a=0;if(e.geometry){var s,u=e.geometry.type;if("Point"!==u&&"MultiPoint"!==u)return!1!==o(e,function(o,u,c,d,f){if(void 0!==s){var l=Object(n.lineString)([s,o],e.properties);if(!1===r(l,t,i,f,a))return!1;a++,s=o}else s=o})&&void 0}})}function p(e,r,t){var n=t,o=!1;return m(e,function(e,i,a,s,u){n=!1===o&&void 0===t?e:r(n,e,i,a,s,u),o=!0}),n}function y(e,r){if(!e)throw new Error("geojson is required");h(e,function(e,t,o){if(null!==e.geometry){var i=e.geometry.type,a=e.geometry.coordinates;switch(i){case"LineString":if(!1===r(e,t,o,0,0))return!1;break;case"Polygon":for(var s=0;s<a.length;s++)if(!1===r(Object(n.lineString)(a[s],e.properties),t,o,s))return!1}}})}function w(e,r,t){var n=t;return y(e,function(e,o,i,a){n=0===o&&void 0===t?e:r(n,e,o,i,a)}),n}function v(e,r){if(r=r||{},!Object(n.isObject)(r))throw new Error("options is invalid");var t,o=r.featureIndex||0,i=r.multiFeatureIndex||0,a=r.geometryIndex||0,s=r.segmentIndex||0,u=r.properties;switch(e.type){case"FeatureCollection":o<0&&(o=e.features.length+o),u=u||e.features[o].properties,t=e.features[o].geometry;break;case"Feature":u=u||e.properties,t=e.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":t=e;break;default:throw new Error("geojson is invalid")}if(null===t)return null;var c=t.coordinates;switch(t.type){case"Point":case"MultiPoint":return null;case"LineString":return s<0&&(s=c.length+s-1),Object(n.lineString)([c[s],c[s+1]],u,r);case"Polygon":return a<0&&(a=c.length+a),s<0&&(s=c[a].length+s-1),Object(n.lineString)([c[a][s],c[a][s+1]],u,r);case"MultiLineString":return i<0&&(i=c.length+i),s<0&&(s=c[i].length+s-1),Object(n.lineString)([c[i][s],c[i][s+1]],u,r);case"MultiPolygon":return i<0&&(i=c.length+i),a<0&&(a=c[i].length+a),s<0&&(s=c[i][a].length-s-1),Object(n.lineString)([c[i][a][s],c[i][a][s+1]],u,r)}throw new Error("geojson is invalid")}function b(e,r){if(r=r||{},!Object(n.isObject)(r))throw new Error("options is invalid");var t,o=r.featureIndex||0,i=r.multiFeatureIndex||0,a=r.geometryIndex||0,s=r.coordIndex||0,u=r.properties;switch(e.type){case"FeatureCollection":o<0&&(o=e.features.length+o),u=u||e.features[o].properties,t=e.features[o].geometry;break;case"Feature":u=u||e.properties,t=e.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":t=e;break;default:throw new Error("geojson is invalid")}if(null===t)return null;var c=t.coordinates;switch(t.type){case"Point":return Object(n.point)(c,u,r);case"MultiPoint":return i<0&&(i=c.length+i),Object(n.point)(c[i],u,r);case"LineString":return s<0&&(s=c.length+s),Object(n.point)(c[s],u,r);case"Polygon":return a<0&&(a=c.length+a),s<0&&(s=c[a].length+s),Object(n.point)(c[a][s],u,r);case"MultiLineString":return i<0&&(i=c.length+i),s<0&&(s=c[i].length+s),Object(n.point)(c[i][s],u,r);case"MultiPolygon":return i<0&&(i=c.length+i),a<0&&(a=c[i].length+a),s<0&&(s=c[i][a].length-s),Object(n.point)(c[i][a][s],u,r)}throw new Error("geojson is invalid")}},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=t(11),o=t(13);r.default=function(e,r,t){void 0===t&&(t={});var i=n.getCoord(e),a=n.getCoord(r),s=o.degreesToRadians(a[1]-i[1]),u=o.degreesToRadians(a[0]-i[0]),c=o.degreesToRadians(i[1]),d=o.degreesToRadians(a[1]),f=Math.pow(Math.sin(s/2),2)+Math.pow(Math.sin(u/2),2)*Math.cos(c)*Math.cos(d);return o.radiansToLength(2*Math.atan2(Math.sqrt(f),Math.sqrt(1-f)),t.units)}},function(e,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n=t(12);r.getCoord=function(e){if(!e)throw new Error("coord is required");if(!Array.isArray(e)){if("Feature"===e.type&&null!==e.geometry&&"Point"===e.geometry.type)return e.geometry.coordinates;if("Point"===e.type)return e.coordinates}if(Array.isArray(e)&&e.length>=2&&!Array.isArray(e[0])&&!Array.isArray(e[1]))return e;throw new Error("coord must be GeoJSON Point or an Array of numbers")},r.getCoords=function(e){if(Array.isArray(e))return e;if("Feature"===e.type){if(null!==e.geometry)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")},r.containsNumber=function e(r){if(r.length>1&&n.isNumber(r[0])&&n.isNumber(r[1]))return!0;if(Array.isArray(r[0])&&r[0].length)return e(r[0]);throw new Error("coordinates must only contain numbers")},r.geojsonType=function(e,r,t){if(!r||!t)throw new Error("type and name required");if(!e||e.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.type)},r.featureOf=function(e,r,t){if(!e)throw new Error("No feature passed");if(!t)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!e.geometry||e.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.geometry.type)},r.collectionOf=function(e,r,t){if(!e)throw new Error("No featureCollection passed");if(!t)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+t+", FeatureCollection required");for(var n=0,o=e.features;n<o.length;n++){var i=o[n];if(!i||"Feature"!==i.type||!i.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!i.geometry||i.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+i.geometry.type)}},r.getGeom=function(e){return"Feature"===e.type?e.geometry:e},r.getType=function(e,r){return"FeatureCollection"===e.type?"FeatureCollection":"GeometryCollection"===e.type?"GeometryCollection":"Feature"===e.type&&null!==e.geometry?e.geometry.type:e.type}},function(e,r,t){"use strict";function n(e,r,t){void 0===t&&(t={});var n={type:"Feature"};return(0===t.id||t.id)&&(n.id=t.id),t.bbox&&(n.bbox=t.bbox),n.properties=r||{},n.geometry=e,n}function o(e,r,t){return void 0===t&&(t={}),n({type:"Point",coordinates:e},r,t)}function i(e,r,t){void 0===t&&(t={});for(var o=0,i=e;o<i.length;o++){var a=i[o];if(a.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var s=0;s<a[a.length-1].length;s++)if(a[a.length-1][s]!==a[0][s])throw new Error("First and last Position are not equivalent.")}return n({type:"Polygon",coordinates:e},r,t)}function a(e,r,t){if(void 0===t&&(t={}),e.length<2)throw new Error("coordinates must be an array of two or more positions");return n({type:"LineString",coordinates:e},r,t)}function s(e,r){void 0===r&&(r={});var t={type:"FeatureCollection"};return r.id&&(t.id=r.id),r.bbox&&(t.bbox=r.bbox),t.features=e,t}function u(e,r,t){return void 0===t&&(t={}),n({type:"MultiLineString",coordinates:e},r,t)}function c(e,r,t){return void 0===t&&(t={}),n({type:"MultiPoint",coordinates:e},r,t)}function d(e,r,t){return void 0===t&&(t={}),n({type:"MultiPolygon",coordinates:e},r,t)}function f(e,t){void 0===t&&(t="kilometers");var n=r.factors[t];if(!n)throw new Error(t+" units is invalid");return e*n}function l(e,t){void 0===t&&(t="kilometers");var n=r.factors[t];if(!n)throw new Error(t+" units is invalid");return e/n}function h(e){return 180*(e%(2*Math.PI))/Math.PI}function g(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)&&!/^\s*$/.test(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.earthRadius=6371008.8,r.factors={centimeters:100*r.earthRadius,centimetres:100*r.earthRadius,degrees:r.earthRadius/111325,feet:3.28084*r.earthRadius,inches:39.37*r.earthRadius,kilometers:r.earthRadius/1e3,kilometres:r.earthRadius/1e3,meters:r.earthRadius,metres:r.earthRadius,miles:r.earthRadius/1609.344,millimeters:1e3*r.earthRadius,millimetres:1e3*r.earthRadius,nauticalmiles:r.earthRadius/1852,radians:1,yards:r.earthRadius/1.0936},r.unitsFactors={centimeters:100,centimetres:100,degrees:1/111325,feet:3.28084,inches:39.37,kilometers:.001,kilometres:.001,meters:1,metres:1,miles:1/1609.344,millimeters:1e3,millimetres:1e3,nauticalmiles:1/1852,radians:1/r.earthRadius,yards:1/1.0936},r.areaFactors={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:386e-9,millimeters:1e6,millimetres:1e6,yards:1.195990046},r.feature=n,r.geometry=function(e,r,t){switch(void 0===t&&(t={}),e){case"Point":return o(r).geometry;case"LineString":return a(r).geometry;case"Polygon":return i(r).geometry;case"MultiPoint":return c(r).geometry;case"MultiLineString":return u(r).geometry;case"MultiPolygon":return d(r).geometry;default:throw new Error(e+" is invalid")}},r.point=o,r.points=function(e,r,t){return void 0===t&&(t={}),s(e.map(function(e){return o(e,r)}),t)},r.polygon=i,r.polygons=function(e,r,t){return void 0===t&&(t={}),s(e.map(function(e){return i(e,r)}),t)},r.lineString=a,r.lineStrings=function(e,r,t){return void 0===t&&(t={}),s(e.map(function(e){return a(e,r)}),t)},r.featureCollection=s,r.multiLineString=u,r.multiPoint=c,r.multiPolygon=d,r.geometryCollection=function(e,r,t){return void 0===t&&(t={}),n({type:"GeometryCollection",geometries:e},r,t)},r.round=function(e,r){if(void 0===r&&(r=0),r&&!(r>=0))throw new Error("precision must be a positive number");var t=Math.pow(10,r||0);return Math.round(e*t)/t},r.radiansToLength=f,r.lengthToRadians=l,r.lengthToDegrees=function(e,r){return h(l(e,r))},r.bearingToAzimuth=function(e){var r=e%360;return r<0&&(r+=360),r},r.radiansToDegrees=h,r.degreesToRadians=function(e){return e%360*Math.PI/180},r.convertLength=function(e,r,t){if(void 0===r&&(r="kilometers"),void 0===t&&(t="kilometers"),!(e>=0))throw new Error("length must be a positive number");return f(l(e,r),t)},r.convertArea=function(e,t,n){if(void 0===t&&(t="meters"),void 0===n&&(n="kilometers"),!(e>=0))throw new Error("area must be a positive number");var o=r.areaFactors[t];if(!o)throw new Error("invalid original units");var i=r.areaFactors[n];if(!i)throw new Error("invalid final units");return e/o*i},r.isNumber=g,r.isObject=function(e){return!!e&&e.constructor===Object},r.validateBBox=function(e){if(!e)throw new Error("bbox is required");if(!Array.isArray(e))throw new Error("bbox must be an Array");if(4!==e.length&&6!==e.length)throw new Error("bbox must be an Array of 4 or 6 numbers");e.forEach(function(e){if(!g(e))throw new Error("bbox must only contain numbers")})},r.validateId=function(e){if(!e)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof e))throw new Error("id must be a number or a string")},r.radians2degrees=function(){throw new Error("method has been renamed to `radiansToDegrees`")},r.degrees2radians=function(){throw new Error("method has been renamed to `degreesToRadians`")},r.distanceToDegrees=function(){throw new Error("method has been renamed to `lengthToDegrees`")},r.distanceToRadians=function(){throw new Error("method has been renamed to `lengthToRadians`")},r.radiansToDistance=function(){throw new Error("method has been renamed to `radiansToLength`")},r.bearingToAngle=function(){throw new Error("method has been renamed to `bearingToAzimuth`")},r.convertDistance=function(){throw new Error("method has been renamed to `convertLength`")}},function(e,r,t){"use strict";function n(e,r,t){void 0===t&&(t={});var n={type:"Feature"};return(0===t.id||t.id)&&(n.id=t.id),t.bbox&&(n.bbox=t.bbox),n.properties=r||{},n.geometry=e,n}function o(e,r,t){return void 0===t&&(t={}),n({type:"Point",coordinates:e},r,t)}function i(e,r,t){void 0===t&&(t={});for(var o=0,i=e;o<i.length;o++){var a=i[o];if(a.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var s=0;s<a[a.length-1].length;s++)if(a[a.length-1][s]!==a[0][s])throw new Error("First and last Position are not equivalent.")}return n({type:"Polygon",coordinates:e},r,t)}function a(e,r,t){if(void 0===t&&(t={}),e.length<2)throw new Error("coordinates must be an array of two or more positions");return n({type:"LineString",coordinates:e},r,t)}function s(e,r){void 0===r&&(r={});var t={type:"FeatureCollection"};return r.id&&(t.id=r.id),r.bbox&&(t.bbox=r.bbox),t.features=e,t}function u(e,r,t){return void 0===t&&(t={}),n({type:"MultiLineString",coordinates:e},r,t)}function c(e,r,t){return void 0===t&&(t={}),n({type:"MultiPoint",coordinates:e},r,t)}function d(e,r,t){return void 0===t&&(t={}),n({type:"MultiPolygon",coordinates:e},r,t)}function f(e,t){void 0===t&&(t="kilometers");var n=r.factors[t];if(!n)throw new Error(t+" units is invalid");return e*n}function l(e,t){void 0===t&&(t="kilometers");var n=r.factors[t];if(!n)throw new Error(t+" units is invalid");return e/n}function h(e){return 180*(e%(2*Math.PI))/Math.PI}function g(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)&&!/^\s*$/.test(e)}Object.defineProperty(r,"__esModule",{value:!0}),r.earthRadius=6371008.8,r.factors={centimeters:100*r.earthRadius,centimetres:100*r.earthRadius,degrees:r.earthRadius/111325,feet:3.28084*r.earthRadius,inches:39.37*r.earthRadius,kilometers:r.earthRadius/1e3,kilometres:r.earthRadius/1e3,meters:r.earthRadius,metres:r.earthRadius,miles:r.earthRadius/1609.344,millimeters:1e3*r.earthRadius,millimetres:1e3*r.earthRadius,nauticalmiles:r.earthRadius/1852,radians:1,yards:r.earthRadius/1.0936},r.unitsFactors={centimeters:100,centimetres:100,degrees:1/111325,feet:3.28084,inches:39.37,kilometers:.001,kilometres:.001,meters:1,metres:1,miles:1/1609.344,millimeters:1e3,millimetres:1e3,nauticalmiles:1/1852,radians:1/r.earthRadius,yards:1/1.0936},r.areaFactors={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:386e-9,millimeters:1e6,millimetres:1e6,yards:1.195990046},r.feature=n,r.geometry=function(e,r,t){switch(void 0===t&&(t={}),e){case"Point":return o(r).geometry;case"LineString":return a(r).geometry;case"Polygon":return i(r).geometry;case"MultiPoint":return c(r).geometry;case"MultiLineString":return u(r).geometry;case"MultiPolygon":return d(r).geometry;default:throw new Error(e+" is invalid")}},r.point=o,r.points=function(e,r,t){return void 0===t&&(t={}),s(e.map(function(e){return o(e,r)}),t)},r.polygon=i,r.polygons=function(e,r,t){return void 0===t&&(t={}),s(e.map(function(e){return i(e,r)}),t)},r.lineString=a,r.lineStrings=function(e,r,t){return void 0===t&&(t={}),s(e.map(function(e){return a(e,r)}),t)},r.featureCollection=s,r.multiLineString=u,r.multiPoint=c,r.multiPolygon=d,r.geometryCollection=function(e,r,t){return void 0===t&&(t={}),n({type:"GeometryCollection",geometries:e},r,t)},r.round=function(e,r){if(void 0===r&&(r=0),r&&!(r>=0))throw new Error("precision must be a positive number");var t=Math.pow(10,r||0);return Math.round(e*t)/t},r.radiansToLength=f,r.lengthToRadians=l,r.lengthToDegrees=function(e,r){return h(l(e,r))},r.bearingToAzimuth=function(e){var r=e%360;return r<0&&(r+=360),r},r.radiansToDegrees=h,r.degreesToRadians=function(e){return e%360*Math.PI/180},r.convertLength=function(e,r,t){if(void 0===r&&(r="kilometers"),void 0===t&&(t="kilometers"),!(e>=0))throw new Error("length must be a positive number");return f(l(e,r),t)},r.convertArea=function(e,t,n){if(void 0===t&&(t="meters"),void 0===n&&(n="kilometers"),!(e>=0))throw new Error("area must be a positive number");var o=r.areaFactors[t];if(!o)throw new Error("invalid original units");var i=r.areaFactors[n];if(!i)throw new Error("invalid final units");return e/o*i},r.isNumber=g,r.isObject=function(e){return!!e&&e.constructor===Object},r.validateBBox=function(e){if(!e)throw new Error("bbox is required");if(!Array.isArray(e))throw new Error("bbox must be an Array");if(4!==e.length&&6!==e.length)throw new Error("bbox must be an Array of 4 or 6 numbers");e.forEach(function(e){if(!g(e))throw new Error("bbox must only contain numbers")})},r.validateId=function(e){if(!e)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof e))throw new Error("id must be a number or a string")},r.radians2degrees=function(){throw new Error("method has been renamed to `radiansToDegrees`")},r.degrees2radians=function(){throw new Error("method has been renamed to `degreesToRadians`")},r.distanceToDegrees=function(){throw new Error("method has been renamed to `lengthToDegrees`")},r.distanceToRadians=function(){throw new Error("method has been renamed to `lengthToRadians`")},r.radiansToDistance=function(){throw new Error("method has been renamed to `radiansToLength`")},r.bearingToAngle=function(){throw new Error("method has been renamed to `bearingToAzimuth`")},r.convertDistance=function(){throw new Error("method has been renamed to `convertLength`")}},function(e,r){var t=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};e.exports=function(e,r){if(!t(e))throw new Error("Coordinates must be an array");if(e.length<2)throw new Error("Coordinates must be at least 2 numbers long");return{type:"Feature",geometry:{type:"Point",coordinates:e},properties:r||{}}}}]);